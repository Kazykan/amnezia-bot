import io
import logging
import os
from datetime import datetime
import zipfile
from aiogram.types import BufferedInputFile
from service.system_stats import find_peak_usage, get_vnstat_hourly
from settings import ADMINS, BOT, DB_FILE

logger = logging.getLogger(__name__)


def create_db_backup(original_path: str, backup_dir: str = "backups") -> bytes:
    """–°–æ–∑–¥–∞–µ—Ç ZIP-—Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ ZIP-—Ñ–∞–π–ª—É (–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)."""
    os.makedirs(backup_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_zip_path = os.path.join(backup_dir, f"full_backup_{timestamp}.zip")

    with zipfile.ZipFile(backup_zip_path, "w") as zipf:
        # –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(original_path):
            zipf.write(original_path, os.path.relpath(original_path, os.getcwd()))

        # –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
        for file in ["awg-decode.py", "newclient.sh", "removeclient.sh"]:
            if os.path.exists(file):
                zipf.write(file, os.path.relpath(file, os.getcwd()))

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ files/
        for root, _, files in os.walk("files"):
            for file in files:
                full_path = os.path.join(root, file)
                zipf.write(full_path, os.path.relpath(full_path, os.getcwd()))

        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ users/
        for root, _, files in os.walk("users"):
            for file in files:
                full_path = os.path.join(root, file)
                zipf.write(full_path, os.path.relpath(full_path, os.getcwd()))

    # –í–æ–∑–≤—Ä–∞—Ç –ø—É—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    try:
        with open(backup_zip_path, "rb") as f:
            zip_bytes = f.read()
    finally:
        os.remove(backup_zip_path)

    return zip_bytes  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ –∫–∞–∫ –±–∞–π—Ç—ã


async def send_backup():
    try:
        backup_bytes = create_db_backup(DB_FILE)

        input_file = BufferedInputFile(file=backup_bytes, filename="backup.zip")

        for admin_id in ADMINS:
            await BOT.send_document(
                chat_id=admin_id,
                document=input_file,
                caption="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            )
            logging.info("–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. {admin_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}")


async def send_peak_usage():
    """–û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–µ—Ç—å"""
    vnstat_data = get_vnstat_hourly()
    peak_hour_total, peak_total, peak_hour_avg, peak_avg_rate = find_peak_usage(
        vnstat_data
    )

    if peak_hour_total and peak_hour_avg:
        response = (
            f"üìä **–°–∞–º–∞—è –ø–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –¥–µ–Ω—å**:\n"
            f"üîπ `total`: {peak_total} –ì–∏–ë –≤ {peak_hour_total}\n"
            f"üîπ `avg. rate`: {peak_avg_rate} –ú–±–∏—Ç/—Å –≤ {peak_hour_avg}"
        )
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∏–∫–æ–≤—É—é –Ω–∞–≥—Ä—É–∑–∫—É!"

    for admin_id in ADMINS:
        await BOT.send_message(chat_id=admin_id, text=response)
