import json
from scp import SCPClient  # type: ignore
import os
import paramiko
import logging

logger = logging.getLogger(__name__)


def deploy_to_all_servers(config_path="files/servers.json") -> str:
    text = "üîÑ –ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    with open(config_path, "r") as f:
        servers = json.load(f)

    for server in servers:
        text += f"\n- {server['ssh_host']}"
        logger.info(f"Deploying to {server['ssh_host']}...")
        deploy_and_exec(server)
        text += f"\n‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ {server['ssh_host']} –∑–∞–≤–µ—Ä—à–µ–Ω."
        logger.info(f"Deployment to {server['ssh_host']} completed.")

    return text + "\n‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω."


def deploy_and_exec(server_config):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–ø–ª–æ–π."""
    ssh_host = server_config["ssh_host"]
    ssh_port = server_config["ssh_port"]
    ssh_user = server_config["ssh_user"]
    ssh_key_path = os.path.expanduser(server_config["ssh_key_path"])
    local_wg0 = server_config["local_wg0"]
    local_clients_table = server_config["local_clientsTable"]
    remote_tmp_dir = server_config["remote_tmp_dir"]
    docker_container = server_config["docker_container"]
    remote_docker_path = server_config["remote_docker_path"]

    wg_config_file = os.path.join(remote_docker_path, "wg0.conf")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(
        hostname=ssh_host, port=ssh_port, username=ssh_user, key_filename=ssh_key_path
    )

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    ssh.exec_command(f"mkdir -p {remote_tmp_dir}")

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    with SCPClient(ssh.get_transport()) as scp:
        scp.put(local_wg0, remote_path=os.path.join(remote_tmp_dir, "wg0.conf"))
        scp.put(
            local_clients_table,
            remote_path=os.path.join(remote_tmp_dir, "ClientsTable"),
        )

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    file_mappings = {
        "wg0.conf": os.path.join(remote_docker_path, "wg0.conf"),
        "ClientsTable": os.path.join(remote_docker_path, "ClientsTable"),
    }

    for filename, container_path in file_mappings.items():
        remote_file_path = os.path.join(remote_tmp_dir, filename)
        cmd_copy = f"docker cp {remote_file_path} {docker_container}:{container_path}"
        ssh.exec_command(cmd_copy)

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WireGuard –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    cmd_restart = f'docker restart {docker_container}'
    ssh.exec_command(cmd_restart)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ssh.close()


def check_docker_ps(servers_json_path: str) -> str:
    with open(servers_json_path, "r") as f:
        servers = json.load(f)

    for server in servers:
        logger.info(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {server['ssh_host']}")
        try:
            ssh_key_path = os.path.expanduser(server["ssh_key_path"])

            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(
                hostname=server["ssh_host"],
                port=server.get("ssh_port", 22),
                username=server["ssh_user"],
                key_filename=ssh_key_path,
            )

            stdin, stdout, stderr = ssh.exec_command("docker ps")
            output = stdout.read().decode()
            errors = stderr.read().decode()

            if output:
                logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output}")
            if errors:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏:\n{errors}")

            ssh.close()
            return output
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {server['ssh_host']}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {server['ssh_host']}: {e}"

    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.")
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É."
