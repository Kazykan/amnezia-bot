import logging
import time
from typing import List

from service.db_instance import user_db
from service.base_model import UserData
from settings import BOT

logger = logging.getLogger(__name__)


async def daily_check_end_date_and_notify():
    start_time = time.time()
    logger.info("üì¨ –ù–∞—á–∏–Ω–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")


    try:
        days_before_end = [10, 5, 2]
        users = user_db.get_users_expiring_in_days(days_before_end)
        await notify_users(users)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ daily_check_end_date_and_notify: {e}")
    finally:
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. –ó–∞–Ω—è–ª–æ {time.time() - start_time:.2f} —Å–µ–∫.")


async def notify_users(users: List[UserData]):
    for user in users:
        try:
            await BOT.send_message(
                user.telegram_id,
                f"–ü—Ä–∏–≤–µ—Ç, {user.name}! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è {user.end_date}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –≤–æ–≤—Ä–µ–º—è!",
            )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
            )
