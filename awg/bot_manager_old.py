import db
import aiohttp
import logging
import asyncio
import aiofiles
import os
import re
import json
import subprocess
import sys
import pytz
import zipfile
import humanize
import shutil
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils import executor
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    PreCheckoutQuery,
    LabeledPrice,
    Message,
)
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from utils import get_isp_info, load_isp_cache, parse_relative_time, parse_transfer
from service.generate_vpn_key import generate_vpn_key
from keyboard.menu import get_extend_subscription_keyboard, get_main_menu_markup, get_user_main_menu











@dp.message_handler(commands=["start", "help"])
async def help_command_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in ADMINS or user_id in MODERATORS:
        sent_message = await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_markup(user_id, ADMINS)
        )
        user_main_messages[user_id] = {
            "chat_id": sent_message.chat.id,
            "message_id": sent_message.message_id,
            "state": None,  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º state —è–≤–Ω–æ
        }
    else:
        try:
            with open("logo.png", "rb") as photo:
                await message.answer_photo(
                    photo=photo,
                    caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *VPN –ë–æ—Ç!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="Markdown",
                    reply_markup=get_user_main_menu(),
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_user_main_menu(),
            )


@dp.message_handler(commands=["add_admin"])
async def add_admin_command(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    try:
        new_admin_id = int(message.text.split()[1])
        if new_admin_id not in ADMINS:
            db.add_admin(new_admin_id)
            ADMINS.append(new_admin_id)
            await message.answer(f"–ê–¥–º–∏–Ω {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
            await BOT.send_message(new_admin_id, "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add_admin <user_id>")


@dp.message_handler()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    user_state = user_main_messages.get(user_id, {}).get("state")
    if user_state == "waiting_for_user_name":
        user_name = message.text.strip()
        if not re.match(r"^[a-zA-Z0-9_-]+$", user_name):
            await message.reply("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, - –∏ _.")
            return
        success = db.root_add(user_name, ipv6=False)
        if success:
            conf_path = os.path.join("users", user_name, f"{user_name}.conf")
            if os.path.exists(conf_path):
                vpn_key = await generate_vpn_key(conf_path)
                caption = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {user_name}:\nAmneziaVPN:\n[Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru)\n[GitHub](https://github.com/amnezia-vpn/amnezia-client)\n```\n{vpn_key}\n```"
                with open(conf_path, "rb") as config:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
                    config_message = await BOT.send_document(
                        user_id, config, caption=caption, parse_mode="Markdown"
                    )
                    await BOT.pin_chat_message(
                        user_id, config_message.message_id, disable_notification=True
                    )
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤–Ω–∏–∑—É, –Ω–µ –∑–∞–∫—Ä–µ–ø–ª—è—è –µ–≥–æ
        await BOT.edit_message_text(
            chat_id=user_main_messages[user_id]["chat_id"],
            message_id=user_main_messages[user_id]["message_id"],
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_markup(user_id, ADMINS),
        )
        user_main_messages[user_id]["state"] = None
    elif user_state == "waiting_for_admin_id" and user_id in ADMINS:
        try:
            new_admin_id = int(message.text.strip())
            if new_admin_id not in ADMINS:
                db.add_admin(new_admin_id)
                ADMINS.append(new_admin_id)
                await message.reply(f"–ê–¥–º–∏–Ω {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
                await BOT.send_message(new_admin_id, "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            await BOT.edit_message_text(
                chat_id=user_main_messages[user_id]["chat_id"],
                message_id=user_main_messages[user_id]["message_id"],
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_markup(user_id, ADMINS),
            )
            user_main_messages[user_id]["state"] = None
        except:
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID.")


@dp.callback_query_handler(lambda c: c.data == "add_user")
async def prompt_for_user_name(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")
        ),
    )
    user_main_messages[user_id]["state"] = "waiting_for_user_name"
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "add_admin")
async def prompt_for_admin_id(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home")
        ),
    )
    user_main_messages[user_id]["state"] = "waiting_for_admin_id"
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data == "list_admins")
async def list_admins_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    keyboard = InlineKeyboardMarkup(row_width=2)
    for admin_id in ADMINS:
        keyboard.insert(
            InlineKeyboardButton(
                f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {admin_id}", callback_data=f"remove_admin_{admin_id}"
            )
        )
    keyboard.add(InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"))
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + "\n".join(f"- {admin_id}" for admin_id in ADMINS),
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("remove_admin_"))
async def remove_admin_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    admin_id = int(callback_query.data.split("_")[2])
    if admin_id not in ADMINS or len(ADMINS) <= 1:
        await callback_query.answer(
            "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.", show_alert=True
        )
        return
    db.remove_admin(admin_id)
    ADMINS.remove(admin_id)
    await BOT.send_message(admin_id, "–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    await list_admins_callback(callback_query)


@dp.callback_query_handler(lambda c: c.data.startswith("connections_"))
async def client_connections_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    username = callback_query.data.split("connections_")[1]
    file_path = os.path.join("files", "connections", f"{username}_ip.json")
    if not os.path.exists(file_path):
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö.", show_alert=True)
        return

    async with aiofiles.open(file_path, "r") as f:
        data = json.loads(await f.read())
    last_connections = sorted(
        data.items(),
        key=lambda x: datetime.strptime(x[1], "%d.%m.%Y %H:%M"),
        reverse=True,
    )[:5]
    isp_results = await asyncio.gather(
        *(get_isp_info(ip) for ip, _ in last_connections)
    )

    text = f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {username}:*\n" + "\n".join(
        f"{ip} ({isp}) - {time}"
        for (ip, time), isp in zip(last_connections, isp_results)
    )
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{username}"),
        InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"),
    )
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("ip_info_"))
async def ip_info_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    username = callback_query.data.split("ip_info_")[1]
    active_info = next((ac for ac in db.get_active_list() if ac[0] == username), None)
    if not active_info:
        await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.", show_alert=True)
        return

    ip_address = active_info[3].split(":")[0]
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://ip-api.com/json/{ip_address}") as resp:
            data = await resp.json() if resp.status == 200 else {}

    text = f"*IP info {username}:*\n" + "\n".join(
        f"{k.capitalize()}: {v}" for k, v in data.items()
    )
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"client_{username}"),
        InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"),
    )
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("delete_user_"))
async def client_delete_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    username = callback_query.data.split("delete_user_")[1]
    if db.deactive_user_db(username):
        shutil.rmtree(os.path.join("users", username), ignore_errors=True)
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{username}** —É–¥–∞–ª–µ–Ω."
    else:
        text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å **{username}**."
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=get_main_menu_markup(user_id, ADMINS),
    )
    await callback_query.answer()




@dp.callback_query_handler(lambda c: c.data == "get_config")
async def list_users_for_config(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    clients = db.get_client_list()
    if not clients:
        await callback_query.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    for client in clients:
        keyboard.insert(
            InlineKeyboardButton(client[0], callback_data=f"send_config_{client[0]}")
        )
    keyboard.add(InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"))
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("send_config_"))
async def send_user_config(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    username = callback_query.data.split("send_config_")[1]
    conf_path = os.path.join("users", username, f"{username}.conf")
    if os.path.exists(conf_path):
        vpn_key = await generate_vpn_key(conf_path)
        caption = f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {username}:\nAmneziaVPN:\n[Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru)\n[GitHub](https://github.com/amnezia-vpn/amnezia-client)\n```\n{vpn_key}\n```"
        with open(conf_path, "rb") as config:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            config_message = await BOT.send_document(
                user_id, config, caption=caption, parse_mode="Markdown"
            )
            await BOT.pin_chat_message(
                user_id, config_message.message_id, disable_notification=True
            )
    else:
        await BOT.send_message(
            user_id,
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è **{username}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="Markdown",
        )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "create_backup")
async def create_backup_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    backup_filename = f"backup_{datetime.now().strftime('%Y-%m-%d')}.zip"
    with zipfile.ZipFile(backup_filename, "w") as zipf:
        for file in ["awg-decode.py", "newclient.sh", "removeclient.sh"]:
            if os.path.exists(file):
                zipf.write(file)
        for root, _, files in os.walk("files"):
            for file in files:
                zipf.write(
                    os.path.join(root, file),
                    os.path.relpath(os.path.join(root, file), os.getcwd()),
                )
        for root, _, files in os.walk("users"):
            for file in files:
                zipf.write(
                    os.path.join(root, file),
                    os.path.relpath(os.path.join(root, file), os.getcwd()),
                )
    with open(backup_filename, "rb") as f:
        await BOT.send_document(user_id, f, caption=backup_filename)
    os.remove(backup_filename)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "instructions")
async def show_instructions(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö", callback_data="mobile_instructions"),
        InlineKeyboardButton("üíª –î–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤", callback_data="pc_instructions"),
        InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"),
    )
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "mobile_instructions")
async def mobile_instructions(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    instruction_text = (
        "üì± *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:*\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ AmneziaVPN:\n"
        "   - [Google Play](https://play.google.com/store/apps/details?id=org.amnezia.vpn&hl=ru)\n"
        "   - –ò–ª–∏ —á–µ—Ä–µ–∑ [GitHub](https://github.com/amnezia-vpn/amnezia-client)\n"
        "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'.\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ VPN –∫–ª—é—á –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º .conf.\n"
        "4. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'.\n"
        "5. –ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ VPN."
    )
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="instructions"),
        InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"),
    )
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=instruction_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "pc_instructions")
async def pc_instructions(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMINS and user_id not in MODERATORS:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    instruction_text = (
        "üíª *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:*\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç AmneziaVPN —Å [GitHub](https://github.com/amnezia-vpn/amnezia-client).\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.\n"
        "3. –û—Ç–∫—Ä–æ–π—Ç–µ AmneziaVPN –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'.\n"
        "4. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É .conf.\n"
        "5. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ VPN.\n"
        "6. –ì–æ—Ç–æ–≤–æ! VPN –∞–∫—Ç–∏–≤–µ–Ω."
    )
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="instructions"),
        InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data="home"),
    )
    await BOT.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=instruction_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
    )
    await callback_query.answer()


async def check_environment():
    if DOCKER_CONTAINER not in subprocess.check_output(
        f"docker ps --filter 'name={DOCKER_CONTAINER}' --format '{{{{.Names}}}}'",
        shell=True,
    ).decode().strip().split("\n"):
        logger.error(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '{DOCKER_CONTAINER}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    subprocess.check_call(
        f"docker exec {DOCKER_CONTAINER} test -f {WG_CONFIG_FILE}", shell=True
    )
    return True


async def on_startup(dp):
    os.makedirs("files/connections", exist_ok=True)
    os.makedirs("users", exist_ok=True)
    await load_isp_cache()
    if not await check_environment():
        for admin_id in ADMINS:
            await BOT.send_message(admin_id, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AmneziaVPN.")
        await BOT.close()
        sys.exit(1)
    if not db.get_admins():
        logger.error("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        sys.exit(1)
    scheduler.add_job(db.ensure_peer_names, IntervalTrigger(minutes=1))


async def on_shutdown(dp):
    scheduler.shutdown()


if __name__ == "__main__":
    # payment_handlers(dp)
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
